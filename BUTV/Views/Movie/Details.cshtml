@{
    ViewData["Title"] = Model.Name;
    ViewData["Desc"] = Model.ShortDesc + " - Butv.org";
    ViewData["FullImg"] = Model.Picture.FullSizeImageUrl;
    ViewData["Img"] = Model.Picture.ImageUrl;
}
@model MovieEntityModel
@section TopHeader {
    <script type="application/ld+json">
        {
        "@@context": "http://schema.org",
        "@@type": "Movie",
        "headline": "@Model.Name - BUTV.org",
        "datePublished": "@Model.PublishDateTime",
        "image": [
        "@Model.Picture.FullSizeImageUrl"
        ]
        }
    </script>
    <meta property="og:image:width" content="300" />
    <meta property="og:image:height" content="400" />
}
@section Scripts {
    <script>
        $('.responsive').slick({
            dots: true,
            infinite: false,
            speed: 300,
            slidesToShow: 6,
            slidesToScroll: 6,
            responsive: [
                {
                    breakpoint: 1024,
                    settings: {
                        slidesToShow: 4,
                        slidesToScroll: 4,
                        infinite: true,
                        dots: true
                    }
                },
                {
                    breakpoint: 600,
                    settings: {
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }
                },
                {
                    breakpoint: 480,
                    settings: {
                        slidesToShow: 2,
                        slidesToScroll: 2
                    }
                },
                {
                    breakpoint: 320,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1
                    }
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            ]
        });
    </script>
    <script>
        $('li.episode a').on('click', function (e) {
            e.preventDefault();
            var a = $(this);
            //var li = a.parent().parent().find('li');
            $.each($('li.episode'), function (k, v) {
                $(v).removeClass('active');
            });
            LoadUrl(a.attr('data-id'));
            a.parent().addClass('active');
        })
        $(document).ready(function () {
            if ($('#episode').val()) {
                var url = $('#episode').attr('data-url');
                if (url.length == 0) {
                    LoadUrl($('#episode').val(), true);

                }
            }
            $('.report-bug').on('click', function (e) {
                e.preventDefault();
                $.ajax({
                    url: '/movie/ReportBug',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: { id: $(this).data('id') }
                }).done(function (data) {
                    alert(data.msg);
                })
                    .fail(function (e) { })
                    .always(function () { });
            })

            $('#video1').allofthelights();
            $('video')[0].load();

        });
        function LoadUrl(id, reloaded) {
            $('.spinner').show();
            $('video source').attr('src', '');
            $('video')[0].load();

            $.ajax({
                url: '/api/movie/GetGoogleUrl',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { id: id, reloaded: reloaded }
            }).done(function (data) {
                $('video source').attr('src', data.url);
                $('video')[0].load();
                $('.spinner').hide();
            })
                .fail(function (e) { alert('Bị lỗi nguồn, vui lòng nhấn lại tập phim hoặc chọn Server khác. Trân trọng.'); })
                .always(function () { });

        }
    </script>
    <script src="~/js/jquery.allofthelights-min.js"></script>
}

<div class="moviedetail">
    @Html.Partial("_MovieBreadcrumb", Model.Breadcrumb)
    <div class="clip-wrapper">
        @if (!Model.HasEpisode)
        {
            <video id="video1" controls="" preload="auto" autoplay=""><source src="@Model.PlayingSource.GoogleUrl"></video>
            <input type="hidden" value="@Model.PlayingSource.Id" data-url="" id="episode" />
        }
        else
        {
            <video id="video1" controls="" preload="auto" autoplay=""><source src="@Model.PlayingSource.GoogleUrl"></video>
            <input type="hidden" value="@Model.PlayingSource.Id" data-name="@Model.PlayingSource.Name" data-url="@Model.PlayingSource.GoogleUrl" id="episode" />
        }
        <div class="spinner">
            <div class='uil-ripple-css' style='-webkit-transform:scale(0.6)'>
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
    @*<div class="user-tools">
            <div class="add fleft"><button type="button"><i class="fa fa-plus-circle"></i></button></div>
            <div class="box-program fleft">
                    <div class="subcribe">
                        <button type="button"><i class="fa fa-heart" aria-hidden="true"></i></button>
                        <span><i></i><b></b>12k</span>
                    </div>
                </div>
            <div class="rating fleft">
                <span class="rating-score"><span>9.5</span></span>
                <div class="lead">
                    <div id="stars" class="starrr"></div>
                    <strong class="subcribe"><span><i></i><b></b>72</span></strong>
                </div>
            </div>
            <div class="clearfix"></div>
        </div>*@
    
    <div class="link-chapter">
        @foreach (var item in Model.MovieSources)
        {
            <div class="sever">
                <span><i class="fa fa-film"></i>@item.DisplaySource</span>
                @if (item.Episodes.Any())
                {
                    <ul>
                        @foreach (var e in item.Episodes)
                        {
                            @if (Model.HasEpisode)
                            {
                                string activeClass = e.Default ? "episode active" : "episode";
                                <li class="@activeClass"><a href="#" data-id="@e.Id">@e.Name</a></li>
                            }
                            else
                            {
                                <li class="episode">

                                    <a href="#" data-id="@e.Id">
                                        @if (e.Name.Length > 0)
                                        {
                                            <text>@e.Quality - @e.Name</text>
                                        }
                                        else
                                        { <text>@e.Quality</text> }
                                    </a>
                                </li>
                            }
                        }
                    </ul>
                }
            </div>
        }
    </div>
    @*}*@
    <div class="section-content fluid" itemscope itemtype="http://schema.org/Movie">
        <div class="outside-des">
            <h1 itemprop="name">@Model.Name</h1>
            <h2>@Model.RealName</h2>
            <div class="showdetail">
                <ul>
                    @foreach (var genre in Model.Genres)
                    {
                        <li><a href="#">@genre</a></li>
                    }
                    <li><span class="time">@Model.Length</span></li>
                    <li><span><strong><span class="_listen" type="video">@Model.View</span></strong> lượt xem</span></li>
                    @*<li><span class="rate-vote rate-vote-9"></span><em>(5 lượt)</em></li>*@
                </ul>
            </div>
            <div class="function-social">
                <div class="fb-like" data-share="true" data-href="http://@Context.Request.Host@Context.Request.Path" data-layout="button" data-action="like" data-show-faces="false"></div>
            </div>
            <div class="function-social">
                <div class="fb-send" data-href="http://@Context.Request.Host@Context.Request.Path"></div>
            </div>
            <div class="box-statistics">
                <a href="#" class="report-bug" data-id="@Model.Id"><i class="fa fa-flag-o"></i> Báo lỗi</a>
            </div>
            <div class="light-status switch"><button type="button"><i class="fa fa-lightbulb-o"></i> Tắt đèn</button></div>
        </div>
        <div class="clearfix"></div>
        <div class="box-description" itemprop="description">
            @Html.Raw(Model.Description)
        </div>
        <ul class="tag">
            <li>
                <strong itemprop="director" itemscope itemtype="http://schema.org/Person">Đạo diễn: </strong><h3>
                    @foreach (var d in Model.Directors)
                    {
                        <a href="#" title="">@d.Key</a>
                    }
                </h3>
            </li>
            @if (!String.IsNullOrWhiteSpace(Model.ImdbRating))
            {
                <li><strong>IMDb: </strong> <h3><strong>@Model.ImdbRating</strong></h3></li>
            }
            @if (Model.Year > 0)
            {
                <li><strong>Năm xuất bản: </strong> <h3>@Model.Year</h3></li>
            }
            @if (Model.ReleaseDate.Length > 0)
            {
                <li><strong>Ngày ra rạp: </strong> <h3>@Model.ReleaseDate</h3></li>
            }
            @if (!String.IsNullOrWhiteSpace(Model.Length))
            {
                <li><strong>Thời lượng: </strong> <h3>@Model.Length</h3></li>
            }
            @foreach (var c in Model.Countries)
            {
                <li><strong>Quốc gia: </strong> <h3>@c.Key</h3></li>
            }
            <li class="key">
                <strong>Từ khóa: </strong>
                @foreach (var t in Model.Tags)
            {
                    <h3><a href="#"><span>@t</span></a></h3>
                }
            </li>
        </ul>
        @await Component.InvokeAsync("MovieActor", new { movieId = Model.Id })
        <div class="title">Bình luận</div>
        <div class="commentbox">
            <div class="fb-comments" width="100%" data-href="http://@Context.Request.Host@Context.Request.Path" data-numposts="5"></div>
        </div>
    </div>
</div>
@*<script>
        var __slice = [].slice;

        (function ($, window) {
            var Starrr;

            Starrr = (function () {
                Starrr.prototype.defaults = {
                    rating: void 0,
                    numStars: 5,
                    change: function (e, value) { }
                };

                function Starrr($el, options) {
                    var i, _, _ref,
                        _this = this;

                    this.options = $.extend({}, this.defaults, options);
                    this.$el = $el;
                    _ref = this.defaults;
                    for (i in _ref) {
                        _ = _ref[i];
                        if (this.$el.data(i) != null) {
                            this.options[i] = this.$el.data(i);
                        }
                    }
                    this.createStars();
                    this.syncRating();
                    this.$el.on('mouseover.starrr', 'span', function (e) {
                        return _this.syncRating(_this.$el.find('span').index(e.currentTarget) + 1);
                    });
                    this.$el.on('mouseout.starrr', function () {
                        return _this.syncRating();
                    });
                    this.$el.on('click.starrr', 'span', function (e) {
                        return _this.setRating(_this.$el.find('span').index(e.currentTarget) + 1);
                    });
                    this.$el.on('starrr:change', this.options.change);
                }

                Starrr.prototype.createStars = function () {
                    var _i, _ref, _results;

                    _results = [];
                    for (_i = 1, _ref = this.options.numStars; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
                        _results.push(this.$el.append("<span class='glyphicon .glyphicon-star-empty'></span>"));
                    }
                    return _results;
                };

                Starrr.prototype.setRating = function (rating) {
                    if (this.options.rating === rating) {
                        rating = void 0;
                    }
                    this.options.rating = rating;
                    this.syncRating();
                    return this.$el.trigger('starrr:change', rating);
                };

                Starrr.prototype.syncRating = function (rating) {
                    var i, _i, _j, _ref;

                    rating || (rating = this.options.rating);
                    if (rating) {
                        for (i = _i = 0, _ref = rating - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                            this.$el.find('span').eq(i).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
                        }
                    }
                    if (rating && rating < 5) {
                        for (i = _j = rating; rating <= 4 ? _j <= 4 : _j >= 4; i = rating <= 4 ? ++_j : --_j) {
                            this.$el.find('span').eq(i).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                        }
                    }
                    if (!rating) {
                        return this.$el.find('span').removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                    }
                };

                return Starrr;

            })();
            return $.fn.extend({
                starrr: function () {
                    var args, option;

                    option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                    return this.each(function () {
                        var data;

                        data = $(this).data('star-rating');
                        if (!data) {
                            $(this).data('star-rating', (data = new Starrr($(this), option)));
                        }
                        if (typeof option === 'string') {
                            return data[option].apply(data, args);
                        }
                    });
                }
            });
        })(window.jQuery, window);

        $(function () {
            return $(".starrr").starrr();
        });

        $(document).ready(function () {

            $('#stars').on('starrr:change', function (e, value) {
                $('#count').html(value);
            });

            $('#stars-existing').on('starrr:change', function (e, value) {
                $('#count-existing').html(value);
            });
        });



    </script>*@
